
ref:
https://www.youtube.com/watch?v=hAAj27hgPFg&list=PLWgD0gfm500EMEDPyb3Orb28i7HK5_DkR&index=2&ab_channel=Maransatto


Neste documento estarei abordando explicaçoes do passo a passo pra a criação da API REst.


    Antes de tudo precisamos ter instalado na maquina o node , npm , vscode, docker, mysql,  e naturalmente o servidor do mysql , aqui na minha maquina estou usando o apache  e o git pois estaremos transformando está pasta em um repositorio do github.


agora vamos iniciaar oprojeto criando o arquivo package.json onde estará as dependecias do projeto.

    comando: npm init  ou npm init -y para noa fazer as perguntas.

vamos instalar o EXPRESS onde é uma bilbioteca do npm pois ela vamos utilizar para fazeras requisições HTTP do node.

    comando :  npm install --save express

Então será instalado o express como nossa dependencia do projeto e com express vem a pasta node_modules então precisamos criar um arquivo chamado .gitignore e nele precisamos incluir está pasta pois não queremos que está pastasuba para o nosso repositorio git


Agora vamos criar um arquivo chamado server.js

neste arquivo vamos criar um aconstante http e importar o monulo http

deposi criamos a portaque nosso servidor vai rodar  usamos a variavel de ambient com o codigo process.env.PORT ou se não ter nenhuma porta disponivel rodaremos  na porta 3000

depois criaremos outro arquivo app.js onde vamos importar o express para fazer as requisiçoes depois criaremos uma variavel app  e atribuimos uma extancia do express
e no arquivo  app  vamos exportar a variavel app pois nela esta o codigo da requisição http  onde estamos enviand o status 200 para mostrar que está tudo ok !!

 
Agora voltamos para o arquivo server.js  e criamos o nosso sservidor para isso criamos um avariavl chamada server atribuimos  o http.createserver(app) e como paramaetro para a função createserver passamos a nossa variavel app

depois colocamos o servidor para escutar a porta entaõ passamos a variavel port como parametro paraa função listen()

por isso do codigo server.listen(port) 


E como estou usando uma extenção do git ele  me ajuda a controlar quantos arquivos devo comitar para subir no meu repositorio.

O legal dessa extenção é que eu nao preciso dar um comando no terminal, apenas tenho que fazer uma sincronização pela primaira vez com o git e para fazer essa sincronização temos que fazer os commit e o push e colocar o nosso tolken de acesso que eé pedido como senha . depois ele ja entende a sincronia  e bas confirmar o commint com  o push que ele ja sobe no repoistorio.

===================================================================================

Dando continuidade vamos entender como criar as rotas :

ref: https://www.youtube.com/watch?v=TGbiY6015Wg&list=PLWgD0gfm500EMEDPyb3Orb28i7HK5_DkR&index=3&ab_channel=Maransatto

para criarmos as rotas de pedidos será a mesma logica criada para a rota de produtos.

fazermos uma requerimento do express 
estanciamos ele em um avariavel chamada express.

depois criamos outra variavel chamada de router onde será atribuido  o express junto com sua sunção Router()


E com o  router iremos fazer aas nossas requisições http.
um acoisa que e importante entender é que o nome dos arquivos importa nesses caso como estamos trabalhando com rotas estamos especicando a rotas de pedidos e produtos e a url que vai no navegador será o nome do arquivo especifico .

Com neste caso estou trabalhando no localhost então a url qu eestamos trabalhando é:

    http://localhost:3000/produtos   

isso no caso de produtos.

agora em pedidos o final da url ja muda.

    http://localhost:3000/pedidos
    
Perceba que pedidos e produtos sao respectivamente o nome dos nossos arquivos
enta'para definirmo scorretamente a a rota devemos trablahar com http junto com o router do express para que ele indetifique por si só a rota.

acredito queficou um poruco confuso a explicação mas com essa explicaçõa e observando o codigo vai ser faci entender do que se trata.

Agora voltando para Router o router basicamente é um modulo do express que trata as rotas e com ele conseguimos fazer as requisições http e assim sendo possivel trabalahar com os verbos get post patch delete.


Agora um explicação para conseguirmos entender os parametros posto na url e como conseguirmos trabalahr com eles.

preste atenção neste codigo.

router.get('/:id_pedido', (req, resp, next) => {
    const id = req.params.id_pedido;

    if (id === "show") {
        resp.status(200).send({
            menssagem: `Você descobriu o id show que é  o => ${id}`
        });
    } else {
        resp.status(200).send({
            mennsagem: `Voce nao colocou o id especial!vc colcocou ${id}`
        });
    }
});


neste codigo queremos trabalhar com um produto especifico no caso do exemplo é um id_pedido para pegarmos esse parametro na url devemos pegar da funçao midwer na requisição os parametros dessa requisição por isso do params e depois pegamos o id_pedido e atribuimos em uma variavel e com esse parametro consigo fazer quanquer logica neste caso estou trablahando com uma estrutura condicional onde caso  parametro da url que seja colocado pelo usuario seja show vai acontecer algo


======================================================================================================================================================================

Agora vamos faslar de algumas ferramentas de desenvolvimeto que iremos utilizatr neste projeto para facilictar o trabalho umadelas será o:

    NODEMON 

    O nodemon permite que nos possamos trnbalhar o nosso projeto fazerndo as atulaizações necessarias sem precisar ficar dando um restart no servidor manulamente . Com o ndemon  ele vai perceber essa alteração e vai far esse restart no nosso servido automaticamente.
    
    
    vamos dar o comando :
    
        npm install --save-dev nodemon
    
    com esse comando vamo instalar as dependencias do nosso projeto.
    
    para instalarmos o nodemon globalmete em nossa maquina devemos adcionar a flag -g 
    então o codigo fica assim:
    
        npm install -g nodemon
    
    podemos intalar o morgan
    
    Basicamente o morgan traz para nos o tipo de requisição que foi feita na url e ele mostra no terminal se foi um get, put, patch, post, delete na rota de pedidos ou produtos que no cacso so temos essas 2 rotas.
    
    npm install --save-dev morgan
    
    E temos que estancialo no arquivo onde vai as nossas rotas que no caso é app.js
    
    o codigo ficara assim:
    
        const morgan = require('morgan');
        
        e entre a rotas e as requisições colocamos  a requisição do morgan onde ele vai monitorar as rotas.
        
        O codigo será :
        
            app.use(morgan('dev'));
            
            logo em seguida as requisições das rotas pedidos e produtos, ou seja ele tem que fica assima das rotas.

======================================================================================================================================================================
agora vamos aprender como tratar o corpo da requisição e para isso vamos instalar o 

Body-parcer

    comando: para instalar:
    
        npm instal --save body-paarser

e vamos ao nosso arquivo app.ja vamos importar o modulo do bodyParser

    const bodyParser = require('bodyParser')

    
    app.use(bodyParser.urlencoded({ extended: false }))

    e depois vamos colocar o codigo acima para tratar a requisição para apenas aceitar dados simples
    
depois vamo incluir : !!!! ATENÇÃO REMOVI ESSA LINHA DE CODIGO ONDE CNVERTE O CORPO DA REWUISIÇÃO EM JSON !!!!! POIS NÃO ESTAVA FUNCIONANDO ISSO POR QUE O METHODOSEND JA CONVERTE PARA JSON ENTÃO ESSA LINHA E DESNECESSARIA POREM ESTOU DEIXANDO ELA AQUI PARA SE ENTENDER DE COMO E A CONVERJÃO PARA JSON USANDO O BODUPARSER.

    app.use(bodyParser.json();
    
isso siguinifica que vamos aceitar apenas dados no formato json.

agora no arquivo de rotas tanto do produto quanto no de pedidos vamos trabalhar em cima das requisições do body ou seja do req.body.

o codigo do arquivo produto.js que esta na pasta rotas

    // ====== INSERI UM PRODUTO  ========================================
router.post('/', (req, resp, next) => {
    const produto = {
        nome: req.body.nome,
        preco: req.body.preco
    }

    resp.status(200).send({
        menssagen: "metodo post dentro da rota de produtos",
        produtoCriado: produto
    })
});

na parte destacadas estamos trabalhando o corpo da requisiçõa onde vamos extrair estas informações.

para pegar os dados do corpo da requisição precisamos de uma interface de frontend preparada para isso e como não temos vamos trabalhar com o postman para enviar esses dados na requisição do corpo.

E para fzer os teste de requisição no postman basta colocar a url desejada onde no nosso caso estamos usando a url :

    http://localhost:3002/produtos
    
    E dentro do postman selecionamos o Body e x-www-form-urlencoded para criarmos os atributo do corpo qu eno caso é nome e preco.
    
Criei tambem um segundo arquivo chamado de BD.js onde estou armazenando algumas funçẽos e metodos onde uma dela no momento e cadastrarProdutos onde tenho tambem um methodo que acrecenta um id na sequencia onde ele e pegado dos parametros da requisição.

Então nomeu arquivo produtos.js 

eu acrecentei uma require para importar o BD.js

    const bancoDados = require("./BD")
    
veja o codigo deste arquivo para entender melhor o que está sendo feito

depois acrecentei no methodo post onde vou inserir um produto este codigo:

    router.post('/', (req, resp, next) => {

    const produto = bancoDados.cadastrarProduto(
        {
            id: req.params.id,
            nome: req.body.nome,
            preco: req.body.preco
        }
    );
    resp.status(201).send({
        menssagen: "metodo post dentro da rota de produtos",
        menss: "pedido Criado com sucesso",
        produtoCriado: produto
    })
});



============================================================================
Agora vamos tratar do CORS 

Ele siguinifica Cros origin resource Sharing

E um afuncionalidade do html onde permite que o site acesse um outro site dependendo de algmas restrições, restrições de cabeçalho por exemplo
    
    
para maior compreenção acesse a documentação: 
https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors 

Cross-Origin Resource Sharing ( CORS ) é um padrão que permite que um servidor relaxe a política de mesma origem . Isso é usado para permitir explicitamente algumas solicitações de origem cruzada enquanto rejeita outras. Por exemplo, se um site oferece um serviço incorporável, pode ser necessário flexibilizar certas restrições. Definir essa configuração de CORS não é necessariamente fácil e pode apresentar alguns desafios. Nestas páginas, veremos algumas mensagens de erro comuns do CORS e como resolvê-las.

Se a configuração do CORS não estiver configurada corretamente, o console do navegador apresentará um erro como "Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at $somesite"indicar que a solicitação foi bloqueada por violação das regras de segurança do CORS. No entanto, isso pode não ser necessariamente um erro de configuração. É possível que a solicitação esteja de fato sendo intencionalmente proibida pelo aplicativo Web do usuário e pelo serviço externo remoto. No entanto, se o endpoint estiver disponível, será necessária alguma depuração para ter sucesso.
    
    
    preciso continuar esta descrição do codigo...
    
==================================================================================

Agora vamos partir para o docker onde vamos incluir uma estancia do mysql do  docker
 estamos utilizando o dokcer para armazenar o nosso banco de dados em um container dokcer e fazer as interligação com NodeJs
 
 recomendo que veja na pasta que criei sobre dockercaso queira saber mais sobre o docker:
 
 o comando que vamos utilizar no docker para gerar o container do mysql e executar será:
 
    sudo docker run --rm -p 3306:3306 --name mysql_projeto_full -e MYSQL_ROOT_PASSWORD=root -d mysql

    Estamos usando a flag --rm  para toda vex que darmos um stop no container ele seja automaticamente excluido dessa maneira não acumulamos container sem utilidadades.
    
Precisamos usar o sudo na frente do comando para permitir a execução do codigo caso estejamos logado no linux como usuario comun
    
com esse comando o nosso container será criado então para visulaizarmos temos que dar o coando;

    docker ps
e vamos ver que o container do mysql está rodando perfeitamente.

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                                            NAMES
84d8670d8cca   mysql     "docker-entrypoint.s…"   25 seconds ago   Up 22 seconds   3306/tcp, 33060/tcp, 0.0.0.0:3307->3307/tcp, :::3307->3307/tcp   mysql_projeto_full
         

como eu tenho uma extensão do dataBase no meu vscode vou fazer a conexcao com a minha maquina com o container pois configuramos a porta 3306 e a senha do usario root

porem para fazer as tabelas vamos usar o workbench também! e vamos usar a parte de modelagem dos dados porem tem um curso especifico somente pra modelagen de dados onde a modelagem e construida e baseada na regra de negocios do projeto.



======= Atenção preiso recaptular desdeesse ponto ============

=================================================================================

CONECTANDO API COM BANCO DE DADOS 
sugiro que veja esse vide referente a conecção caso haja alguma duvida.

https://www.youtube.com/watch?v=gGc46-AOa_I&ab_channel=Maransatto
===============================================================================

Para complemento e entender melhor como criar uma conection segura com o banco de dados  veja o link abaixo:

https://community.revelo.com.br/como-conectar-um-banco-de-dados-ao-javascript/


== Agora seguimos para a continuaçãoda playlist : https://www.youtube.com/watch?v=642J5YzLXDk&list=PLWgD0gfm500EMEDPyb3Orb28i7HK5_DkR&index=8&ab_channel=Maransatto


Agora que ja temso o nosso banco de dados  criado e a nossa api precisamos conectalos e para isso devemos baixar outra biblioteca. 

A biblioteca queprecisa ser baixada e a do mysql2 e vamos abaixar ela atraves do npm.

    comando que deve ser rodado:
    
    npm install --save mysql2
    
Ate o momento temos essas estenções instaladas em nosso projeto:

 "author": "Leandro Marques",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.20.2",
    "express": "^4.18.2",
    "morgan": "^1.10.0",
    "mysql2": "^3.6.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}


Agora vamos criar um arquivo chamado mysql.js




    




















